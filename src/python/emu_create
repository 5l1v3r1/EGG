#! /usr/bin/env python
""" This is an example of how to run the GPMMCMC with ``egg.hatch``
and how to predict simualtion outputs with ``egg.fly``.
"""

import argparse
import ast
import egg
import numpy
import os
import subprocess
import sys
from egg.fly import fly
from egg.hatch import hatch
from egg.read_data import read_data

# parse command line
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("--design-file", required=True)
parser.add_argument("--sim-file", required=True)
parser.add_argument("--samples", type=int, required=True)
parser.add_argument("--basis-size", type=int, default=15)
parser.add_argument("--test-points", type=int, default=10)
parser.add_argument("--tmp-dir", default="./tmp")
parser.add_argument("--seed", type=int, default=0)
parser.add_argument("--gpu", action="store_true")
opts = parser.parse_args()

# set random seed
numpy.random.seed(opts.seed)

# run the GPMMCMC
params = hatch(opts.design_file, opts.sim_file, opts.samples,
               opts.gpu, opts.basis_size, tmp_dir=opts.tmp_dir)

# read simulation data
sim_data = read_data(opts.design_file, opts.sim_file, opts.basis_size)

# create some random values for each parameter contained with the min and max
# of the simulation data
x = numpy.random.rand(opts.test_points, params.model.p)
x = x * sim_data["orig"]["xrange"] + sim_data["orig"]["xmin"]

# create user defined inputs file
numpy.savetxt("new_inputs.txt", x)

# predict simulation output for test parameters
fly("new_inputs.txt", tmp_dir=opts.tmp_dir)
